1. value, transactionManager
    - 둘 중 하나에 트랜잭션 매니저의 스프링 빈의 이름을 적어준다.

 2. rollbackFor
    - 예외 발생시 스플링 트랜잭션의 기본 정책은 다음과 같다.
      . 언체크 예외인 RuntimeException, Error와 그하위는 롤백
      . 체크 예외인 Exception과 하위는 커밋

    - 기본 정책에 추가로 어떤 예외가 발생할 때 롤백할 지 지정
    @Transactional(rollbackFor = Exception.class)

 3. noRollbackFor
    - rollbackFor와 반대이다.
      . 기본 정책에 추가로 어떤 예외가 발생했을 때 롤백하면 안되는지 지정

4. propagation
    - REQUIRED      : 기본값. 기존 트랜잭션이 없으면 생성하고, 있으면 참여한다.
    - REQUIRES_NEW  : 항상 새로운 트랜잭션을 생성한다.
    - SUPPORT       : 기존 트랜잭션이 없으면 없는대로 진행하고, 있으면 참여한다.
    - NOT_SUPPORT   : 트랜잭션을 지원하지 않는다
        . 기존 트랜잭션 없음 : 트랜잭션 없이 진행
        . 기존 트랜잭션 있음 : 트랜잭션 없이 진행 ( 기존 트랜잭션 보류 )
     - MANDATORY    : 의무사항. 트랜잭션 반드시 있어야 한다. 기존 트랜잭션 없으면 예외 발생
        . 기존 트랜잭션 없음 : IllegalTransactionStateException 예외 발생
        . 기존 트랜잭션 있음 : 기존 트랜잭션 참여
     - NEVER        : 트랜잭션을 사용하지 않는다. 기존 트랜잭션이 있으면 예외 발생
        . 기존 트랜잭션 없음 : 트랜잭션 없이 진행
        . 기존 트랜잭션 있음 : IllegalTransactionStateException 예외 발생
    - NEXTED    : 새로운 트랜잭션을 생성한다. ( JDBC savepoint 기능사용, JPA는 지원안함 )
        . 기존 트랜잭션 없음 : 새로운 트랜잭션 생성
        . 기존 트랜잭션 있음 : 중첩 트랜잭션을 만든다.
            ! 중첩 트랜잭션은 외부 트랜잭션의 영향을 받지만, 중첩 트랜잭션은 외부에 영향을 주지 않는다.
            ! 중첩 트랜잭션이 롤백 되어도 외부 트랜잭션은 커밋할 수 있다.
            ! 외부 트랜잭션이 롤백 되면 충첩 트랜잭션도 함께 롤백된다.

        * 트랜잭션 전파와 옵션**
        isolation, timeout, readOnly는 트랜잭션이 처음 시작될 때만 적용된다. 트랜잭션에 참여하는 경우에는 적용되지 않는다.
        예를들어 REQUIRED를 통한 트랜잭션 시작, REQUIRED_NEW를 통한 트랜잭션 시작 시점에만 적용된다.

5. isolation
    - DEFAULT : 데이터베이스에서 설정한 격리 수준
    - READ_UNCOMMITTED : 커밋되지 않은 읽기
    - READ_COMMITTED : 커멋 읽기
    - REPEATABLE_READ : 반복 가능 읽기
    - SERIALIZABLE : 직렬화 가능

6. timeout
    - 트랜잭션 수행 시간에 대한 타입아웃 초 단위 지정

7. label
    - 트랜잭션 애노테이션에 있는 값을 직접 읽어서 어떤 동작을 하고 싶을 때 사용

8. readOnly
    - 트랜잭션은 기본적으로 읽기 쓰기 모두 가능한 트랜잭션 생성
    . readOnly=true 옵션을 사용하면 읽기 전용 트랜잭션이 생성된다 ( 등록, 수정, 삭제 불가 ) ==> 성능 최적화 발생

    *프레임워크*
    - JdbcTemplate 에서 변경 기능 실행하면 예외
    - JPA는 변경 가능 실행하면 Flush 안함

    *JDBC드라이버*
        - 변경 기능 실행하면 예외 (DB와 드라이버 버전에 따라 달라질 수 있음)
        - 읽기, 쓰기(마스터, 슬레이브)데이터베이스를 구분해서 요청한다.
          ㄴ 읽기(슬레이브)데이터베이스의 커넥션을 획득해서 사용한다.
    *데이터베이스*
        - 데이터베이스에 따라 읽기 전용 트랜잭션의 경우 성능 최적화 발생
